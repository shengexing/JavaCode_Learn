//章节8.8                列出虚拟机中所有的线程
package ep8_8;

public class ListAllRunningThread {

	/*列出所有线程的信息*/
	public static void list() {
		//获取当前线程所属线程组的父线程组
		ThreadGroup root=Thread.currentThread().getThreadGroup().getParent();
		//不断循环，直到找到根线程组
		while(root.getParent()!=null) {
			root=root.getParent();
		}
		//访问根线程组下的线程
		visit(root, 0);
	}
	
	/*递归的显示线程组中的线程*/
	private static void visit(ThreadGroup group, int level) {
		int numThreads=group.activeCount();              //获取group线程组中活动线程的估计数
		Thread[] threads=new Thread[numThreads];
		//把此线程组中的所有活动线程复制到指定数组中，false表示不包括作为此线程组的子组的线程组中的线程
		numThreads=group.enumerate(threads, false);
		//遍历活动线程数组，打印它们的名字
		for(int i=0; i<numThreads; i++) {
			//Get thread
			Thread thread=threads[i];
			for(int j=0; j<level; j++) {
				System.out.print("   ");
			}
			System.out.println(""+thread.getName());
		}
		
		int numGroups=group.activeGroupCount();          //获取group线程组中活动子线程组的估计数
		ThreadGroup[] groups=new ThreadGroup[numGroups];
		//把对此线程组中的所有活动子组的引用复制到指定数组中
		numGroups=group.enumerate(threads, false);
		//递归的访问子线程组中的线程
		for(int i=0; i<numGroups; i++) {
			visit(groups[i], level+1);
		}
	}
	
	public static void main(String[] args) {
		ThreadGroup group1=new ThreadGroup("ThreadGroup-1");           //建立一个线程组
		//建立3个线程并启动
		Thread[] threads1=new Thread[3];
		for(int i=1; i<4; i++) {
			//新的线程属于group1线程组，以ThreadA为运行对象，名字为"group1-ThreadA-i"
			threads1[i-1]=new Thread(group1, new ThreadA(i*2000), "group1-ThreadA-"+i);
			threads1[i-1].strart();
		}
		
		//建立另一个线程组，属于group1线程组
		ThreadGroup group2=new ThreadGroup(group1, "ThreadGroup-2");
		//建立3个线程并启动
		Thread[] threads2=new Thread[3];
		for(int i=1; i<4; i++) {
			//新的线程属于group2线程组，以ThreadA为运行对象，名字为"group2-ThreadA-i"
			Threads2[i-1]=new Thread(group)
		}
	}

}

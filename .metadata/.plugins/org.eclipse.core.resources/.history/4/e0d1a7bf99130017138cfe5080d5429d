//章节7.6                         复制文件和目录
package ep7_6;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import ep7_5.MoveFileUtil;
import ex13_6_3.DeleteFileUtil;

public class CopyFileUtil {
	/**
	 * 复制单个文件，不覆盖已存在的目标文件
	 * @param srcFileName待复制的源文件名
	 * @param destFileName目标文件名
	 * @return 文件复制成功返回true，否则返回false
	 */
	public static boolean copyFile(String srcFileName, String destFileName) {
		//默认为不覆盖目标文件
		return CopyFileUtil.copyFile(srcFileName, destFileName, false);
	}

	/**
	 * 复制单个文件
	 * @param srcFileName待复制的原文件名
	 * @param destFileName目标文件名
	 * @param overlay如果目标文件存在，是否覆盖
	 * @return 文件复制成功返回true，否则返回false
	 */
	public static boolean copyFile(String srcFileName, String destFileName, boolean overlay) {
		//判断原文件是否存在
		File srcFile=new File(srcFileName);
		if(!srcFile.exists()) {
			System.out.println("复制文件失败：原文件"+srcFileName+"不存在！");
			return false;
		}
		else if(!srcFile.isFile()) {
			System.out.println("复制文件失败："+srcFileName+"不是一个文件！");
			return false;
		}

		File destFile=new File(destFileName);
		//如果目标文件存在
		if(destFile.exists()) {
			//如果允许文件覆盖
			if(overlay) {
				//删除已存在的目标文件，无论目标文件是目录还是单个文件
				System.out.println("目标文件已存在，准备删除它！");
				if(!DeleteFileUtil.delete(destFileName)) {
					System.out.println("复制文件失败：删除目标文件"+destFileName+"失败！");
					return false;
				}
			}
			else {
				System.out.println("复制文件失败：目标文件"+destFileName+"已存在！");
				return false;
			}
		}
		else {
			if(!destFile.getParentFile().exists()) {
				//如果目标文件所在的目录不存在，则创建目录
				System.out.println("目标文件所在目录不存在，准备创建它！");
				if(!destFile.getParentFile().mkdirs()) {
					System.out.println("复制文件失败：创建目标文件所在的目录失败！");
					return false;
				}
			}
		}

		//准备复制文件
		int byteread=0;             //读取的位数
		InputStream in=null;
		OutputStream out=null;
		try {
			in=new FileInputStream(srcFile);            //打开原文件
			//打开连接到目标文件的输出流
			out=new FileOutputStream(destFile);
			byte[] buffer=new byte[1024];
			//一次读取1024个字节，当byteread为-1时表示文件已经读完
			while((byteread=in.read(buffer))!=-1) {
				out.write(buffer,0,byteread);          //将读取的字节写入输出流
			}
			System.out.println("复制单个文件"+srcFileName+"至"+destFileName+"成功！");
			return true;
		} catch(Exception e) {
			System.out.println("复制文件失败："+e.getMessage());
			return false;
		} finally {
			//关闭输入输出流，注意先关闭输出流，在关闭输入流
			if(out!=null) {
				try {
					out.close();
				} catch(IOException e) {
					e.printStackTrace();
				}
			}
			if(in!=null) {
				try {
					in.close();
				} catch(IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * 复制目录，不覆盖已存在的目标目录
	 * @param srcDirName待复制的原目录名
	 * @param destDirName目标目录名
	 * @return 目录复制成功返回true，否则返回false
	 */
	public static boolean moveDirectory(String srcDirName, String destDirName) {
		//默认为不覆盖目标文件
		return MoveFileUtil.moveDirectory(srcDirName, destDirName, false);
	}

	/**
	 * 复制目录，不覆盖已存在的目标目录
	 * @param srcDirName待复制的原目录名
	 * @param destDirName目标目录名
	 * @param overlay如果目标目录存在，是否覆盖
	 * @return 目录复制成功返回true，否则返回false
	 */
	public static boolean moveDirectory(String srcDirName, String destDirName, boolean overlay) {
		//判断原目录是否存在
		File srcDir=new File(srcDirName);
		if(!srcDir.exists()) {
			System.out.println("复制文件目录失败：原目录："+srcDirName+"不存在！");
			return false;
		}
		else if(!srcDir.isDirectory()) {
			System.out.println("复制目录失败："+srcDirName+"不是一个目录！");
			return false;
		}

		//如果目标文件夹名不以文件分隔符结尾，自动添加文件分隔符
		if(!destDirName.endsWith(File.separator)) {
			destDirName+=File.separator;
		}
		File destDir=new File(destDirName);
		//如果文件夹存在
		if(destDir.exists()) {
			if(overlay) {
				//允许覆盖则删除已存在的目标文件
				System.out.println("目标目录已存在，准备删除它！");
				if(!DeleteFileUtil.delete(destDirName)) {
					System.out.println("复制目录失败：删除目标目录"+destDirName+"失败！");
				}
			}
			else {
				System.out.println("复制目录失败：目标目录"+destDirName+"已存在！");
				return false;
			}
		}
		else {
			//创建目标目录
			System.out.println("目标目录不存在，准备创建它！");
			if(!destDir.mkdirs()) {
				System.out.println("复制目录失败：创建目标目录失败！");
				return false;
			}
		}

		boolean flag=true;
		//复制原目录下的文件和子目录到目标目录下
		File[] files=srcDir.listFiles();
		for(int i=0; i<files.length; i++) {
			//复制子文件
			if(files[i].isFile()) {
				flag=MoveFileUtil.moveFile(files[i].getAbsolutePath(), destDirName+files[i].getName(),overlay);
				if(!flag)
					break;
			}
			//复制子目录
			else if(files[i].isDirectory()) {
				flag=MoveFileUtil.moveDirectory(files[i].getAbsolutePath(), destDirName+files[i].getName(), overlay);
				if(!flag)
					break;
			}
		}

		if(!flag) {
			System.out.println("复制目录"+srcDirName+"至"+destDirName+"失败！");
			return false;
		}

		//删除原目录
		if(DeleteFileUtil.deleteDirectory(srcDirName)) {
			System.out.println("复制目录"+srcDirName+"至"+destDirName+"成功！");
			return true;
		}
		else {
			System.out.println("复制目录"+srcDirName+"至"+destDirName+"失败！");
			return false;
		}
	}

	public static void main(String[] args) {
		//复制单个文件，如果目标文件存在，则替换
		String srcFileName="./src/ep7_5/test1/test1.txt";
		String destFileName="./src/ep7_5/text1/text.txt";
		MoveFileUtil.moveFile(srcFileName, destFileName, true);
		
		//复制目录，如果目标目录存在，则不覆盖
		String srcDirName="./src/ep7_5/test1";
		String destDirName="./src/ep7_5/text1";
		MoveFileUtil.moveDirectory(srcDirName, destDirName,true);

	}

}

